# Configuration compl√®te pour la gestion intelligente de la batterie Enphase
# avec pr√©diction de consommation par analyse historique

# ============================================================================
# PARTIE 1: SENSORS SQL POUR L'ANALYSE HISTORIQUE
# ============================================================================

sensor:
  # Sensor SQL: Consommation moyenne des jours similaires
  - platform: sql
    db_url: sqlite:////config/home-assistant_v2.db
    queries:
      - name: "Consommation Pr√©dite Demain"
        query: >
          WITH tomorrow_weekday AS (
            SELECT CAST(strftime('%w', datetime('now', '+1 day')) AS INTEGER) as weekday
          ),
          similar_days AS (
            SELECT
              s.state,
              s.created_ts,
              strftime('%w', datetime(s.created_ts, 'unixepoch', 'localtime')) as day_of_week
            FROM statistics s
            INNER JOIN statistics_meta sm ON s.metadata_id = sm.id
            WHERE sm.statistic_id = 'sensor.daily_energy_consumption'
              AND s.created_ts > strftime('%s', 'now', '-60 days')
              AND s.created_ts < strftime('%s', 'now', '-1 day')
              AND CAST(strftime('%w', datetime(s.created_ts, 'unixepoch', 'localtime')) AS INTEGER) = (SELECT weekday FROM tomorrow_weekday)
              AND s.state IS NOT NULL
              AND s.state != 'unknown'
              AND s.state != 'unavailable'
          )
          SELECT
            CASE
              WHEN COUNT(*) > 0 THEN ROUND(AVG(CAST(state AS FLOAT)), 2)
              ELSE 5.0
            END as avg_consumption
          FROM similar_days;
        column: "avg_consumption"
        unit_of_measurement: "kWh"

# ============================================================================
# PARTIE 2: TEMPLATE SENSORS (HELPERS)
# ============================================================================

template:
  - sensor:
      # Sensor qui combine consommation pr√©dite et production solaire
      - name: "D√©ficit √ânerg√©tique Pr√©dit Demain"
        unique_id: predicted_energy_deficit_tomorrow
        state: >
          {% set consumption = states('sensor.consommation_predite_demain') | float(5) %}
          {% set production = states('sensor.solcast_pv_forecast_forecast_tomorrow') | float(0) %}
          {{ [consumption - production, 0] | max | round(2) }}
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: measurement
        icon: mdi:battery-alert

      # Sensor qui calcule le SOC n√©cessaire pour couvrir le d√©ficit
      - name: "SOC Requis Pour D√©ficit"
        unique_id: soc_required_for_deficit
        state: >
          {% set deficit = states('sensor.deficit_energetique_predit_demain') | float(0) %}
          {% set battery_capacity = 5.0 %}
          {% set soc_needed = (deficit / battery_capacity) * 100 %}
          {{ [soc_needed, 100] | min | round(0) }}
        unit_of_measurement: "%"
        icon: mdi:battery-charging-high

# ============================================================================
# PARTIE 3: RECORDER - CONFIGURATION POUR L'HISTORIQUE
# ============================================================================

recorder:
  # Conservation des √©tats d√©taill√©s pendant 10 jours
  purge_keep_days: 10

  # Commit toutes les secondes pour de meilleures performances
  commit_interval: 1

  # Base de donn√©es SQLite (par d√©faut)
  db_url: sqlite:////config/home-assistant_v2.db

  # Inclure les entit√©s importantes pour l'analyse
  include:
    entities:
      # BATTERIE
      - sensor.enphase_battery_soc
      - switch.enphase_battery_charge_from_grid

      # √âNERGIE
      - sensor.daily_energy_consumption
      - sensor.hourly_energy_consumption
      - sensor.energy_production_today
      - sensor.energy_production_tomorrow_forecast

      # TEMPO
      - sensor.rte_tempo_today
      - sensor.rte_tempo_tomorrow

      # M√âT√âO & SOLEIL
      - weather.home
      - sun.sun

      # SENSORS PR√âDITS (SQL)
      - sensor.consommation_predite_demain
      - sensor.deficit_energetique_predit_demain
      - sensor.soc_requis_pour_deficit

# ============================================================================
# PARTIE 4: BLUEPRINT - PARAM√àTRES RECOMMAND√âS
# ============================================================================

# Configuration √† utiliser lors de la cr√©ation de l'automation depuis le blueprint
# (Copier ces valeurs dans l'interface Home Assistant)

# EXEMPLE DE CONFIGURATION DU BLUEPRINT:
#
# Gestion Intelligente Charge Batterie Enphase (Tempo + M√©t√©o)
#
# --- CAPTEURS DE BASE ---
# Capteur SOC Batterie: sensor.enphase_battery_soc
# Capacit√© Batterie: 5.0 kWh
# Puissance de Charge: 3.84 kW
# Switch Charge depuis R√©seau: switch.enphase_battery_charge_from_grid
#
# --- TEMPO ---
# Capteur Tempo Aujourd'hui: sensor.rte_tempo_today
# Capteur Tempo Demain: sensor.rte_tempo_tomorrow
#
# --- HEURES CREUSES ---
# D√©but Heures Creuses: 22:30:00
# Fin Heures Creuses: 06:30:00
#
# --- M√âT√âO & SOLEIL ---
# Entit√© M√©t√©o: weather.home
# Capteur Lever du Soleil: sun.sun
#
# --- PRODUCTION SOLAIRE ---
# Capteur Pr√©vision Production Solaire: sensor.solcast_pv_forecast_forecast_tomorrow
# Seuil Production Faible: 5.0 kWh
# Seuil Production Moyenne: 15.0 kWh
#
# --- CONSOMMATION HISTORIQUE (NOUVEAU!) ---
# Capteur Consommation Pr√©dite: sensor.consommation_predite_demain
# Activer Pr√©diction par Consommation Historique: ON
#
# --- AJUSTEMENTS ---
# Ajustement Gap Lever du Soleil: ON
# Consommation Moyenne par Heure: 1.0 kWh/h
#
# --- SOC CIBLES ---
# SOC Minimum pour Charge: 30%
# SOC Minimum Fin Heures Creuses: 80%
# SOC Cible Tempo Rouge: 100%
#
# --- STRAT√âGIE ---
# Strat√©gie de Charge: Optimis√©e (au dernier moment)
# Notifications de Debug: ON (pour tester, puis OFF)

# ============================================================================
# PARTIE 5: UTILITY METER (OPTIONNEL)
# ============================================================================

# Pour cr√©er des sensors de consommation quotidienne si vous n'en avez pas

utility_meter:
  daily_energy_consumption:
    source: sensor.energy_consumed  # Remplacer par votre sensor d'√©nergie consomm√©e
    cycle: daily

  hourly_energy_consumption:
    source: sensor.energy_consumed
    cycle: hourly

# ============================================================================
# PARTIE 6: AUTOMATIONS COMPL√âMENTAIRES (OPTIONNEL)
# ============================================================================

automation:
  # Notification quotidienne avec les pr√©dictions
  - id: battery_daily_prediction_notification
    alias: "Batterie - Notification Pr√©diction Quotidienne"
    trigger:
      - platform: time
        at: "07:00:00"
    action:
      - service: notify.mobile_app  # Adapter selon votre service de notification
        data:
          title: "üìä Pr√©diction √ânerg√©tique Aujourd'hui"
          message: >
            Consommation pr√©vue: {{ states('sensor.consommation_predite_demain') }} kWh
            Production pr√©vue: {{ states('sensor.solcast_pv_forecast_forecast_today') }} kWh
            D√©ficit pr√©dit: {{ states('sensor.deficit_energetique_predit_demain') }} kWh
            SOC batterie: {{ states('sensor.enphase_battery_soc') }}%
            SOC recommand√©: {{ states('sensor.soc_requis_pour_deficit') }}%

  # Forcer mise √† jour du sensor SQL √† 03h00
  - id: update_consumption_prediction
    alias: "Batterie - MAJ Pr√©diction Consommation"
    trigger:
      - platform: time
        at: "03:00:00"
    action:
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.consommation_predite_demain

# ============================================================================
# NOTES D'INSTALLATION
# ============================================================================

# 1. Remplacez tous les noms de sensors par VOS sensors r√©els:
#    - sensor.daily_energy_consumption ‚Üí Votre sensor de consommation quotidienne
#    - sensor.enphase_battery_soc ‚Üí Votre sensor SOC Enphase
#    - sensor.solcast_pv_forecast_forecast_tomorrow ‚Üí Votre sensor production solaire
#
# 2. Ajoutez cette configuration √† votre configuration.yaml ou cr√©ez des fichiers
#    s√©par√©s inclus via:
#    sensor: !include sensors.yaml
#    template: !include templates.yaml
#    automation: !include automations.yaml
#
# 3. Red√©marrez Home Assistant apr√®s modification
#
# 4. V√©rifiez dans Outils de d√©veloppement > √âtats que les sensors sont cr√©√©s
#
# 5. Cr√©ez l'automation depuis le blueprint avec les param√®tres ci-dessus
#
# 6. Activez les notifications de debug pour les premiers jours
#
# 7. Ajustez les seuils selon votre profil de consommation apr√®s 1-2 semaines

# ============================================================================
# D√âPANNAGE
# ============================================================================

# Si le sensor SQL ne fonctionne pas:
# 1. V√©rifiez les logs: Param√®tres > Syst√®me > Journaux
# 2. Testez la requ√™te SQL directement dans la base:
#    sqlite3 /config/home-assistant_v2.db "SELECT * FROM statistics_meta WHERE statistic_id LIKE '%consumption%';"
# 3. V√©rifiez que vous avez au moins 60 jours d'historique
# 4. Forcez une mise √† jour: Services > homeassistant.update_entity

# ============================================================================
# RESSOURCES
# ============================================================================

# Documentation compl√®te: docs/CONSUMPTION_PREDICTION.md
# Exemples SQL: examples/sensors_sql_consumption.yaml
# Blueprint source: blueprints/smart_battery_charge_tempo.yaml
# Support: https://github.com/foXaCe/enphase-battery/issues
